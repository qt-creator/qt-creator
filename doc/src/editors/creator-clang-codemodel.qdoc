/****************************************************************************
**
** Copyright (C) 2018 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Creator documentation.
**
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
**
****************************************************************************/

// **********************************************************************
// NOTE: the sections are not ordered by their logical order to avoid
// reshuffling the file each time the index order changes (i.e., often).
// Run the fixnavi.pl script to adjust the links to the index order.
// **********************************************************************

/*!
    \contentspage {Qt Creator Manual}
    \previouspage creator-diff-editor.html
    \page creator-clang-codemodel.html
    \nextpage creator-finding-overview.html

    \title Parsing C++ Files with the Clang Code Model

    The \e {code model} is the part of an IDE that understands the language you
    are using to write your application. It is the framework that allows \QC
    to provide the following services:

    \list

        \li \l{Completing Code}{Code completion}

        \li Syntactic and \l{Semantic Highlighting}{semantic highlighting}

        \li Navigating in the code by using the \l{Searching with the Locator}
            {locator}, \l{Moving to Symbol Definition or Declaration}
            {following symbols}, and so on

        \li Inspecting code by using the \l{Browsing Project Contents}
            {class browser}, the \l{Viewing QML Types}{outline}, and so on

        \li Diagnostics

        \li \l{Viewing Function Tooltips}{Tooltips}

        \li \l{Finding Symbols}{Finding and renaming symbols}

        \li \l{Applying Refactoring Actions}{Refactoring actions}

    \endlist

    \QC comes with a plugin that provides some of these services
    for C++ on top of \l{http://clang.llvm.org/}{Clang}.

    \section1 About the Clang Code Model

    The Clang project provides libraries for parsing
    C language family source files. The feedback you get through warning and
    error markers is the same as a compiler will give you, not an incomplete
    set or a close approximation, as when using the built-in \QC code model.
    Clang focuses on detailed information for diagnostics, which is really
    useful if the code contains typos, for example.

    Clang keeps up with the development of the C++ language. At the time of this
    writing, it supports C++98/03, C++11, C++14, C++17, C89, C99, Objective-C,
    and Objective-C++.

    On the downside, for large projects using Clang as code model is slower than
    using the built-in code model. Clang does not need to generate object files,
    but it still needs to parse and analyze the source files. For small projects
    that only use STL, this is relatively fast. But for larger projects that
    include several files, processing a single file and all the included files
    can take a while.

    The Clang code model plugin now provides some of the services that were
    previously provided by the built-in C/C++ code model. Currently, the
    following services are implemented:

    \list

        \li Code completion
        \li Syntactic and semantic highlighting
        \li \l{Using Clang Tools}{Diagnostics}
        \li Outline of symbols
        \li Tooltips
        \li Renaming of local symbols

    \endlist

    To use the built-in code model instead, select \uicontrol Help >
    \uicontrol {About Plugins} > \uicontrol C++, and deselect the
    \uicontrol ClangCodeModel check box. The changes take effect after
    you restart \QC.

    You can configure Clang diagnostics either globally or separately for:

    \list
        \li Clang code model (globally or at project level)
        \li Clang tools (globally or at project level)
    \endlist

    \section1 Configuring Clang Code Model

    To configure the Clang code model globally:

    \list 1

        \li Select \uicontrol Tools > \uicontrol Options > \uicontrol C++ >
            \uicontrol {Code Model}.

            \image qtcreator-clang-code-model-options.png

        \li To instruct the code model to interpret ambiguous header files as C
            language files if you develop mainly using C, select the
            \uicontrol {Interpret ambiguous headers as C headers} check box.

        \li To process precompiled headers, deselect the
            \uicontrol {Ignore precompiled headers} check box.

        \li To avoid out-of-memory crashes caused by indexing huge source files
            that are typically auto-generated by scripts or code, the size of
            files to index is limited to 5MB by default. To adjust the limit,
            edit the value for the \uicontrol {Do not index files greater than}
            check box. To index all files, deselect the check box.

        \li Select \uicontrol Manage to specify the level for requesting Clang
            warnings.

            \image qtcreator-diagnostics-configuration.png

    \endlist

    \section1 Clang Warnings

    The predefined configurations request Clang warnings at the following
    levels:

    \list

        \li \uicontrol {Pedantic Warnings} uses the \c -Wpendantic option that
            requests all the warnings demanded by strict ISO C and ISO C++.

        \li \uicontrol {Warnings for Questionable Constructs} combines the
            \c -Wall and \c -Wextra options to request all warnings about easily
            avoidable questionable constructions and some additional warnings.

        \li \uicontrol {Warnings for Almost Everything} uses the \c -Weverything
            option with negative options to suppress some warnings.

    \endlist

    You can edit the predefined configurations to request specific warnings
    beginning with \c -W. Each of these warnings also has a negative version
    that begins with \c -Wno.

    Keep in mind that some options turn on other options. For more information,
    see \l{https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html}
    {Options to Request or Suppress Warnings} or the GCC or Clang manual pages.

    \section1 Specifying Clang Code Model Settings at Project Level

    You can specify Clang code model settings at project level by selecting
    \uicontrol Projects > \uicontrol {Clang Code Model}.

    In addition to configuring the diagnostics,
    you can select the \uicontrol {Enable MSVC-compliant template parsing} check
    box to parse templates in a MSVC-compliant way. This enables Clang to parse
    headers for example from Active Template Library (ATL) or Windows Runtime
    Library (WRL). However, using the relaxed and extended rules means that no
    highlighting or completion can be provided within template functions.

    \image qtcreator-clang-code-model-build-settings.png

*/
