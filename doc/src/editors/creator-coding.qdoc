/****************************************************************************
**
** Copyright (C) 2018 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Creator documentation.
**
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
**
****************************************************************************/

// **********************************************************************
// NOTE: the sections are not ordered by their logical order to avoid
// reshuffling the file each time the index order changes (i.e., often).
// Run the fixnavi.pl script to adjust the links to the index order.
// **********************************************************************

/*!
    \contentspage {Qt Creator Manual}
    \previouspage creator-usability.html
    \page creator-coding.html
    \nextpage creator-editor-functions.html

    \title Coding

    \image creator_coding.png

    \list

        \li \l{Writing Code}

            Writing, editing, and navigating in source code are core tasks in
            application development. Therefore, the code editor is one of the
            key components of \QC. You can use the code editor in the
            \uicontrol Edit mode.

        \li \l{Finding}

            Use the incremental and advanced search to search from currently
            open projects or files on the file system or use the locator to
            browse through projects, files, classes, functions, documentation
            and file systems.

        \li \l{Refactoring}

            Code refactoring is the process of improving and simplifying code
            without modifying the existing functionality of an application. You
            can easily find and rename symbols and apply predefined actions to
            refactor code.

        \li \l{Beautifying Source Code}

            Beautifying code means applying indentation and style to source
            code files. You can use the Artistic Style, ClangFormat, or
            Uncrustify tool to format source files.

        \li \l{Configuring the Editor}

            You can change the fonts, colors, highlighting, and indentation.
            If you are used to the Vim editor, you can even run the main
            editor in a manner similar to it in the \uicontrol{FakeVim} mode.

    \endlist

    \section1 Related Topics

    \list

        \li \l{Editing MIME Types}

            \QC uses the MIME type of a file to determine which mode and editor
            to use for opening the file. If your files do not match the
            predefined MIME types, you can edit the MIME types.

        \li \l{Modeling}

            You can use the model editor to create Universal Modeling Language
            (UML) style models with structured and behavioral diagrams that
            provide different views of your system and store them in XML format.

       \li \l{Editing State Charts}

            You can use \QC to create applications that embed state machines. A
            project wizard creates \l{https://www.w3.org/TR/scxml/}
            {State Chart XML (SCXML)} files with boilerplate code that you can
            edit using an experimental SCXML editor. You can use the classes in
            the Qt SCXML module to embed state machines created from the files
            in Qt applications.

    \endlist

*/
