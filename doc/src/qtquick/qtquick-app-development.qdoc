/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing
**
** This file is part of Qt Creator
**
**
** GNU Free Documentation License
**
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of this
** file.
**
**
****************************************************************************/

// **********************************************************************
// NOTE: the sections are not ordered by their logical order to avoid
// reshuffling the file each time the index order changes (i.e., often).
// Run the fixnavi.pl script to adjust the links to the index order.
// **********************************************************************

/*!

    \contentspage {Qt Creator Manual}
    \previouspage creator-design-mode.html
    \page creator-visual-editor.html
    \nextpage quick-projects.html

    \title Developing Qt Quick Applications

    \list

        \li \l {Creating Qt Quick Projects}

            You can use wizards to create Qt Quick projects.

        \li \l{Qt Quick UI Forms}

            Some of the wizards create Qt Quick projects that contain UI forms
            (.ui.qml files). The forms use a purely declarative subset of the
            QML language and you can edit them in the Design mode.

        \li \l {Using Qt Quick Designer}

            You can use the code editor (Edit mode) or the visual editor (Design
            mode) to develop Qt Quick applications.

        \li \l {Editing PathView Properties}

            You can use a graphical spline editor to specify \l{PathView} paths.
            A path view lays out data provided by data models on a \l{Path}.

        \li \l {Adding Connections}

            You can connect objects to signals, specify dynamic properties for
            objects, and create bindings between the properties of two objects.

        \li \l {Creating Components}

            You can use basic QML types to create your own components that you
            can combine with ready-made Qt Quick Controls and Layouts
            (available since Qt 5.1).
        \li \l {Creating Screens}

            You can combine basic QML types with ready-made Qt Quick Controls,
            Dialogs, and Layouts (available since Qt 5.1) to create screens. You
            can use states and transitions to navigate between screens.

        \li \l {Browsing ISO 7000 Icons}

            You can add ISO 7000 icons from a library delivered with \QC to Qt
            Quick applications and change their color (commercial only).

        \li \l {Exporting Designs from Graphics Software}

            You can export designs from graphics software, such as Adobe
            Photoshop and GIMP, to QML files. You can then edit QML files in
            \QC.
        \li \l {Using QML Modules with Plugins}

            QML modules may use plugins to expose components defined in C++ to
            QML applications. \QC cannot load the plugins to determine the
            details of the contained components, and therefore, the modules must
            provide extra type information for code completion and the semantic
            checks to work correctly.

    \endlist

*/
